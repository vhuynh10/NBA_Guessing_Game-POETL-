import { BaseClient, ApiResponse, NBATeam, NBAPlayer, NBAGame, NBAStats, NBASeasonAverages, NBAStandings, NBABoxScore, NBAAdvancedStats, NBAOdds, NBAPlayerInjury } from "./types";
export declare class NBAClient extends BaseClient {
    getTeams(params?: {
        division?: string;
        conference?: string;
    }): Promise<ApiResponse<NBATeam[]>>;
    getTeam(id: number): Promise<ApiResponse<NBATeam>>;
    getPlayers(params?: {
        cursor?: number;
        per_page?: number;
        team_ids?: number[];
        player_ids?: number[];
        search?: string;
        first_name?: string;
        last_name?: string;
    }): Promise<ApiResponse<NBAPlayer[]>>;
    getPlayer(id: number): Promise<ApiResponse<NBAPlayer>>;
    getActivePlayers(params?: {
        cursor?: number;
        per_page?: number;
        team_ids?: number[];
        player_ids?: number[];
        search?: string;
        first_name?: string;
        last_name?: string;
    }): Promise<ApiResponse<NBAPlayer[]>>;
    getGames(params?: {
        cursor?: number;
        per_page?: number;
        dates?: string[];
        team_ids?: number[];
        seasons?: number[];
        postseason?: boolean;
        start_date?: string;
        end_date?: string;
    }): Promise<ApiResponse<NBAGame[]>>;
    getGame(id: number): Promise<ApiResponse<NBAGame>>;
    getStats(params?: {
        cursor?: number;
        per_page?: number;
        player_ids?: number[];
        game_ids?: number[];
        dates?: string[];
        seasons?: number[];
        postseason?: boolean;
        start_date?: string;
        end_date?: string;
    }): Promise<ApiResponse<NBAStats[]>>;
    getSeasonAverages(params: {
        season: number;
        player_id: number;
    }): Promise<ApiResponse<NBASeasonAverages[]>>;
    getStandings(params: {
        season: number;
    }): Promise<ApiResponse<NBAStandings[]>>;
    getLiveBoxScores(): Promise<ApiResponse<NBABoxScore[]>>;
    getBoxScores(date: string): Promise<ApiResponse<NBABoxScore[]>>;
    getPlayerInjuries(params?: {
        cursor?: number;
        per_page?: number;
        team_ids?: number[];
        player_ids?: number[];
    }): Promise<ApiResponse<NBAPlayerInjury[]>>;
    getOdds(params?: {
        date?: string;
        game_id?: number;
    }): Promise<ApiResponse<NBAOdds[]>>;
    getAdvancedStats(params?: {
        cursor?: number;
        per_page?: number;
        player_ids?: number[];
        game_ids?: number[];
        dates?: string[];
        seasons?: number[];
        postseason?: boolean;
    }): Promise<ApiResponse<NBAAdvancedStats[]>>;
}
