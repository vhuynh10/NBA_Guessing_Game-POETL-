"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NBAClient = void 0;
const types_1 = require("./types");
class NBAClient extends types_1.BaseClient {
    getTeams(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams(params);
            return this.request(`/nba/v1/teams?${queryParams}`);
        });
    }
    getTeam(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/nba/v1/teams/${id}`);
        });
    }
    getPlayers(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    if (Array.isArray(value)) {
                        value.forEach((v) => queryParams.append(`${key}[]`, v.toString()));
                    }
                    else if (value !== undefined) {
                        queryParams.append(key, value.toString());
                    }
                });
            }
            return this.request(`/nba/v1/players?${queryParams}`);
        });
    }
    getPlayer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/nba/v1/players/${id}`);
        });
    }
    getActivePlayers(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    if (Array.isArray(value)) {
                        value.forEach((v) => queryParams.append(`${key}[]`, v.toString()));
                    }
                    else if (value !== undefined) {
                        queryParams.append(key, value.toString());
                    }
                });
            }
            return this.request(`/nba/v1/players/active?${queryParams}`);
        });
    }
    getGames(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    if (Array.isArray(value)) {
                        value.forEach((v) => queryParams.append(`${key}[]`, v.toString()));
                    }
                    else if (value !== undefined) {
                        queryParams.append(key, value.toString());
                    }
                });
            }
            return this.request(`/nba/v1/games?${queryParams}`);
        });
    }
    getGame(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/nba/v1/games/${id}`);
        });
    }
    getStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams();
            if (params) {
                Object.entries(params).forEach(([key, value]) => {
                    if (Array.isArray(value)) {
                        value.forEach((v) => queryParams.append(`${key}[]`, v.toString()));
                    }
                    else if (value !== undefined) {
                        queryParams.append(key, value.toString());
                    }
                });
            }
            return this.request(`/nba/v1/stats?${queryParams}`);
        });
    }
    getSeasonAverages(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams();
            queryParams.append("season", params.season.toString());
            queryParams.append("player_id", params.player_id.toString());
            return this.request(`/nba/v1/season_averages?${queryParams}`);
        });
    }
    getStandings(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams();
            queryParams.append("season", params.season.toString());
            return this.request(`/nba/v1/standings?${queryParams}`);
        });
    }
    getLiveBoxScores() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request("/nba/v1/box_scores/live");
        });
    }
    getBoxScores(date) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams({ date });
            return this.request(`/nba/v1/box_scores?${queryParams}`);
        });
    }
    getPlayerInjuries(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams(this.buildQueryParams(params));
            return this.request(`/nba/v1/player_injuries?${queryParams}`);
        });
    }
    getOdds(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams(this.buildQueryParams(params));
            return this.request(`/nba/v1/odds?${queryParams}`);
        });
    }
    getAdvancedStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = new URLSearchParams(this.buildQueryParams(params));
            return this.request(`/nba/v1/stats/advanced?${queryParams}`);
        });
    }
}
exports.NBAClient = NBAClient;
