"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLBClient = void 0;
const client_1 = require("./client");
class MLBClient extends client_1.BaseClient {
    getTeams(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/teams`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getTeam(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/teams/${id}`);
        });
    }
    getPlayers(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/players`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getPlayer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/players/${id}`);
        });
    }
    getActivePlayers(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/players/active`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getGames(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/games`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getGame(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/games/${id}`);
        });
    }
    getStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/stats`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getStandings(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/standings`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getPlayerInjuries(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/player_injuries`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getSeasonStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/season_stats`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
    getTeamSeasonStats(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(`/mlb/v1/teams/season_stats`, {
                method: "GET",
                params: this.buildQueryParams(params),
            });
        });
    }
}
exports.MLBClient = MLBClient;
